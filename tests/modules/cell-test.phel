(ns lifegame\modules\cell-test
  (:require lifegame\modules\board :as b)
  (:require lifegame\modules\cell :as c)
  (:require phel\test :refer [deftest is]))

(deftest test-cell-initial
  (let [board (b/create 2 3)
        cell (c/Cell 0 0)]
    (is (= 0 (c/around-living-count cell board)))))

(deftest test-cell-born
  (let [board (b/create 2 3)
        cell (c/Cell 0 0)
        board (c/born cell board)]
    (is (= 1 (get-in board [:matrix 0 0])))))

(deftest test-cell-around-living-count
  (let [board (b/create 2 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 1 0) board)]
    (is (= 2 (c/around-living-count (c/Cell 1 1) board)))))

(deftest test-cell-around-living-count-full
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 0 2) board)
        board (c/born (c/Cell 1 0) board)
        board (c/born (c/Cell 1 2) board)
        board (c/born (c/Cell 2 0) board)
        board (c/born (c/Cell 2 1) board)
        board (c/born (c/Cell 2 2) board)]
    (is (= 8 (c/around-living-count (c/Cell 1 1) board)))))

(deftest test-cell-next-status-dead-8
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 0 2) board)
        board (c/born (c/Cell 1 0) board)
        board (c/born (c/Cell 1 1) board)
        board (c/born (c/Cell 1 2) board)
        board (c/born (c/Cell 2 0) board)
        board (c/born (c/Cell 2 1) board)
        board (c/born (c/Cell 2 2) board)]
    (is (= 0 (c/next-status (c/Cell 1 1) board)))))

(deftest test-cell-next-status-dead-7
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 0 2) board)
        board (c/born (c/Cell 1 0) board)
        board (c/born (c/Cell 1 1) board)
        board (c/born (c/Cell 1 2) board)
        board (c/born (c/Cell 2 0) board)
        board (c/born (c/Cell 2 1) board)]
    (is (= 0 (c/next-status (c/Cell 1 1) board)))))

(deftest test-cell-next-status-dead-6
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 0 2) board)
        board (c/born (c/Cell 1 0) board)
        board (c/born (c/Cell 1 1) board)
        board (c/born (c/Cell 1 2) board)
        board (c/born (c/Cell 2 0) board)]
    (is (= 0 (c/next-status (c/Cell 1 1) board)))))

(deftest test-cell-next-status-dead-5
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 0 2) board)
        board (c/born (c/Cell 1 0) board)
        board (c/born (c/Cell 1 1) board)
        board (c/born (c/Cell 1 2) board)]
    (is (= 0 (c/next-status (c/Cell 1 1) board)))))

(deftest test-cell-next-status-dead-4
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 0 2) board)
        board (c/born (c/Cell 1 1) board)
        board (c/born (c/Cell 1 0) board)]
    (is (= 0 (c/next-status (c/Cell 1 1) board)))))

(deftest test-cell-next-status-born-3
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 0 2) board)]
    (is (= 1 (c/next-status (c/Cell 1 1) board)))))

(deftest test-cell-next-status-live-3
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 0 2) board)
        board (c/born (c/Cell 1 1) board)]
    (is (= 1 (c/next-status (c/Cell 1 1) board)))))

(deftest test-cell-next-status-live-2
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 1 1) board)]
    (is (= 1 (c/next-status (c/Cell 1 1) board)))))

(deftest test-cell-next-status-depopulation-2
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 1 1) board)]
    (is (= 0 (c/next-status (c/Cell 1 1) board)))))

(deftest test-cell-next-status-depopulation-1
  (let [board (b/create 3 3)
        board (c/born (c/Cell 1 1) board)]
    (is (= 0 (c/next-status (c/Cell 1 1) board)))))

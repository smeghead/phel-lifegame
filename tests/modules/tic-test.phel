(ns lifegame\modules\cell-test
  (:require lifegame\modules\board :as b)
  (:require lifegame\modules\cell :as c)
  (:require lifegame\modules\tick :as t)
  (:require phel\test :refer [deftest is]))

(deftest test-tick-4
  # 111
  # 110
  # 000
  #
  # 101
  # 101
  # 000
  (let [board (b/create 3 3)
        board (c/born (c/Cell 0 0) board)
        board (c/born (c/Cell 0 1) board)
        board (c/born (c/Cell 0 2) board)
        board (c/born (c/Cell 1 1) board)
        board (c/born (c/Cell 1 0) board)
        board (t/tick board)
        matrix (board :matrix)]
    (is (= 1 (get-in matrix [0 0])))
    (is (= 0 (get-in matrix [0 1])))
    (is (= 1 (get-in matrix [0 2])))
    (is (= 1 (get-in matrix [1 0])))
    (is (= 0 (get-in matrix [1 1])))
    (is (= 1 (get-in matrix [1 2])))
    (is (= 0 (get-in matrix [2 0])))
    (is (= 0 (get-in matrix [2 1])))
    (is (= 0 (get-in matrix [2 2])))))


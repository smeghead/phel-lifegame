(ns lifegame\modules\tick
  (:require lifegame\modules\board :as b)
  (:require lifegame\modules\cell :as c))

(defn- get-cells [height width]
  (for [x :range [height]
        y :range [width]]
    (c/Cell x y)))

(defn next-board [board f]
  (let [matrix (board :matrix)
        width (count (matrix 0))
        height (count matrix)
        new-matrix (loop [cells (get-cells height width)
                          cells-results (map |(f $ board) cells)
                          new-matrix (b/create-matrix height width 0)]
                     (if (empty? cells)
                       new-matrix
                       (let [cell (first cells)
                             v (first cells-results)]
                         (recur
                           (rest cells)
                           (rest cells-results)
                           (put-in new-matrix [(cell :x) (cell :y)] v)))))]
     (b/Board new-matrix)))

(defn tick [board]
  (next-board board c/next-status))
